<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"
	default-lazy-init="true">

	<description>spring shiro</description>
	
	<!--安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!--设置自定义Realm -->
		<property name="sessionManager" ref="sessionManager" />
		<property name="realm" ref="shiroDbRealm" />
		<!--将缓存管理器，交给安全管理器 -->
		<!-- <property name="cacheManager" ref="shiroEhcacheManager" /> -->
		<property name="cacheManager" ref="redisCacheManager" />
		<!-- 记住密码管理 -->
		<!-- <property name="rememberMeManager" ref="rememberMeManager" /> -->
	</bean>

	<!-- 項目自定义的Realm -->
	<bean id="shiroDbRealm" class="com.lottery.common.shiro.ShiroDbRealm" />

	<!-- 记住密码Cookie -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="rememberMe" />
		<property name="httpOnly" value="true" />
		<!-- 7天,采用spring el计算方便修改[细节决定成败]！ -->
		<property name="maxAge" value="#{7 * 24 * 60 * 60}" />
	</bean>

	<!-- rememberMe管理器,cipherKey生成见{@code Base64Test.java} -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<property name="cipherKey"
			value="#{T(org.apache.shiro.codec.Base64).decode('5aaC5qKm5oqA5pyvAAAAAA==')}" />
		<property name="cookie" ref="rememberMeCookie" />
	</bean>

	<!-- Shiro Filter -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- 安全管理器 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 默认的登陆访问url -->
		<property name="loginUrl" value="/login" />
		<!-- 登陆成功后跳转的url -->
		<property name="successUrl" value="/index" />
		<!-- 没有权限跳转的url -->
		<property name="unauthorizedUrl" value="/unauth" />
		<property name="filterChainDefinitions">
			<value>
				<!-- anon 不需要认证 authc 需要认证 user 验证通过或RememberMe登录的都可以 -->
				/mobile/page/** = user
				/mobile/** = anon
				/lottery/** = anon
				/account/** = anon
				<!-- /sportLottery/** = anon -->
				/commons/** = anon
				/static/** = anon
				/upload/** = anon
				/webhooks = anon
				/login = anon
				/sign = anon
				/signup.do = anon
				/checkUserName.do = anon
				/sport/** = user
				/static/style/trend/** = user
				/static/style/statichtml/** = user
				/static/style/NewUserManager/** = user
				/** = user
			</value>
		</property>
	</bean>

	<!--session管理器 -->
	<bean id="sessionManager"
		class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<property name="sessionIdUrlRewritingEnabled" value="false" />
		<!-- 相隔多久检查一次session的有效性 -->
		<property name="sessionValidationInterval" value="1800000" />
		<!-- session 有效时间为1小时 （毫秒单位） -->
		<property name="globalSessionTimeout" value="2400000" />
		<property name="sessionDAO" ref="redisShiroSessionDAO" />
		<!-- 是否在会话过期后会调用SessionDAO的delete方法删除会话 默认true -->
		<property name="deleteInvalidSessions" value="true" />
		<!-- session listener 接口 -->
		<property name="sessionListeners" ref="sessionListener" />
	</bean>

	<bean id="sessionListener" class="com.lottery.client.common.shiro.ShiroSessionListener"></bean>
	<bean id="shiroAuthorizationHelper"
		class="com.lottery.client.common.shiro.ShiroAuthorizationHelper"></bean>


	<!--自定义session存储容器 -->
	<bean id="redisShiroSessionDAO" class="com.lottery.client.common.shiro.RedisSessionDao">
		<property name="redisManager" ref="lmCacheClient" />
	</bean>

	<bean id="shiroSecurityHelper" class="com.lottery.client.common.shiro.ShiroSecurityHelper">
		<property name="sessionDAO" ref="redisShiroSessionDAO" />
		<property name="shiroAuthorizationHelper" ref="shiroAuthorizationHelper" />
	</bean>
	<!-- 用户授权信息Cache, 采用EhCache -->
	<!-- <bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager"> 
		<property name="cacheManagerConfigFile" value="classpath:ehcache-shiro.xml" 
		/> </bean> -->
	<!-- 自定义cacheManager -->
	<bean id="redisCacheManager" class="com.lottery.client.common.shiro.cache.RedisCacheManager">
		<property name="redisManager" ref="lmCacheClient" />
	</bean>

	<!-- 缓存 -->
	<!-- <bean id="lmCacheClient" class="com.lemeng.base.redis.impl.RedisClusterClient"> 
		<property name="redisNodes"> <value>${redis.url}</value> </property> </bean> -->

	<!-- redisc操作插件配置 -->
	<bean id="lmCacheClient" class="com.lemeng.base.redis.impl.RedisClient">
		<property name="pool" ref="cachePool" />
	</bean>
	<!-- 缓存服务器地址默认端口6379 -->
	<bean id="cachePool" class="com.lemeng.base.redis.impl.RedisPool">
		<property name="redisNodes">
			<value>${redis.url}</value>
		</property>
	</bean>

	<!-- 在方法中 注入 securityManager ，进行代理控制 -->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod"
			value="org.apache.shiro.SecurityUtils.setSecurityManager" />
		<property name="arguments" ref="securityManager" />
	</bean>

	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- AOP式方法级权限检查 -->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor" />

	<!-- 启用shrio授权注解拦截方式 -->
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>


<bean id="sportLettoryService" class="com.lottery.client.lettory.service.impl.SportLettoryServiceImpl" />
	<bean id="sportOrderSync" class="com.lottery.client.lettory.controller.SportOrderSync">
		<property name="sportLettoryService">
			<ref bean="sportLettoryService" />
		</property>
	</bean>
	<bean id="SpringQtzJobMethod"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="sportOrderSync" />
		</property>
		<property name="targetMethod">  <!-- 要执行的方法名称 -->
			<value>execute</value>
		</property>
	</bean>

	<!-- ======================== 调度触发器 ======================== -->
	<bean id="CronTriggerBean" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="SpringQtzJobMethod"></property>
		<property name="cronExpression" value="0 0/20 * * * ?"></property>
	</bean>

	<!-- ======================== 调度工厂 ======================== -->
	<bean id="SpringJobSchedulerFactoryBean"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="CronTriggerBean" />
			</list>
		</property>
	</bean>
</beans>